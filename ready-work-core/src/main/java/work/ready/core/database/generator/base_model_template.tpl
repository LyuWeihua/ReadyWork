package #(baseModelPackageName);

import work.ready.core.database.Model;
import work.ready.core.database.Bean;

/**
 * Generated by Ready.Work
 */
#if (generateChainSetter)
@SuppressWarnings({"serial", "unchecked"})
#else
@SuppressWarnings("serial")
#end
public abstract class #(tableMeta.baseModelName)<M extends #(tableMeta.baseModelName)<M>> extends Model<M> implements Bean {

#set(b = generateChainSetter)
#for(cm : tableMeta.columnMetas)
	#if (cm.remarks)
	/**
	 * #(cm.remarks)
	 */
	#end
	#set(argName = javaKeyword.contains(cm.attrName) ? '_' + cm.attrName : cm.attrName)
	public #(b ? 'M' : 'void') set#(firstCharToUpperCase(cm.attrName))(#(cm.javaType) #(argName)) {
		set(Column.#(argName).field, #(argName));
		#if(b)
		return (M)this;
		#end
	}

    #if (cm.remarks)
    /**
     * #(cm.remarks)
     */
     #end
	#set(getterOfModel = getterTypeMap.get(cm.javaType))
	#if(isBlank(getterOfModel))
		#set(getterOfModel = 'get')
	#end
	public #(cm.javaType) get#(firstCharToUpperCase(cm.attrName))() {
		return #(getterOfModel)(Column.#(argName).field);
	}

#end

	public enum Column implements Model.Column {
		#for(cm : tableMeta.columnMetas)
		    #set(argName = javaKeyword.contains(cm.attrName) ? '_' + cm.attrName : cm.attrName)
		    #(argName)("#(cm.name)")#(for.last ? ";" : ",")
		#end

		private final String field;
        public String get(){ return field; }
		Column(String field) {
			this.field = field;
		}
	}
}

